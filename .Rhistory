str_detect(institution, "Universita Cattolica") ~ "Rome",
str_detect(institution, "University of Turin, Torino") ~ "Turin",
str_detect(institution, "Alma Mater Studiorum") ~ "Bologna",
# barcelona & other spanish city issues:
str_detect(institution, "Barcelona, Spain") ~ "Barcelona",
str_detect(institution, "Universitat Rovira i Virgili") ~ "Tarragona",
str_detect(institution, "Alicante, Spain") ~ "Alicante",
str_detect(institution, "Bormujos, Spain") ~ "Bormujos",
str_detect(institution, "Ciencies d'Alimentacio") ~ "Barcelona",
str_detect(institution, "Jimenez Diaz University Hospital") ~ "Mardrid",
str_detect(institution, "Centro Universitario Cardenal Cisneros") ~ "Madrid",
str_detect(institution, "Universidad Catolica San Antonio de Murcia") ~ "Murcia",
str_detect(institution, "Santiago de Compostela") ~ "Santiago de Compostela",
str_detect(institution, "Consumer and User Psychology Unit, Faculty of Psychology, University of Santiago") ~ "Santiago de Compostela",
str_detect(institution, "Department of Physiology, School of Medicine, University of Santiago de") ~ "Santiago de Compostela", # Confirmed by searching original paper
str_detect(institution, "Serra Hunter Programme") ~ "Barcelona",
str_detect(institution, "Hospital Universitario de Canarias") ~ "Santa Cruz de Tenerife",
str_detect(institution, "Universitat Pompeu Fabra") ~ "Barcelona",
str_detect(institution, "Universidad Loyola Andalucia") ~ "Cordoba",
# Nottingham:
str_detect(institution, "Newark Beacon Innovation Centre") ~ "Nottingham",
# china:
str_detect(institution, "Chaohu Hospital of Anhui") ~ "Hefei",
str_detect(institution, "Huangmei County") ~ "Huanggang",
# Portugal:
str_detect(institution, "Unity in Multidisciplinary Research on Biomedicine (UMIB)") ~ "Porto",
str_detect(institution, "IAJ (Gambling Support Institute)") ~ "Lisbon",
# Turkey:
str_detect(institution, "Inonu University") ~ "Malatya",
str_detect(institution, "Sultan Abdulhamid Han") ~ "Istanbul",
str_detect(institution, "Provincial Health Directorate, Agri") ~ "Agri",
str_detect(institution, "Marmara University") ~ "Istanbul",
str_detect(institution, "Baltalimani Metin Sabanci") ~ "Istanbul",
# Porto Alegre issue:
str_detect(institution, "Porto Alegre") ~ "Porto Alegre",
# Namur:
str_detect(institution, "Namur") ~ "Namur", # Checked there's only one in the data
# Sandy bay tas:
str_detect(institution, "Sandy Bay") ~ "Sandy Bay",
# Oviedo:
str_detect(institution, "Oviedo, Spain") ~ "Oviedo",
str_detect(institution, "Virginia Tech, Blacksburg, VA") ~ "Roanoke",
# Dublin & ireland:
str_detect(institution, "Lucena Clinic Rathgar") ~ "Dublin",
str_detect(institution, "Dublin, Ireland") ~ "Dublin",
# West Chester University:
str_detect(institution, "West Chester University") ~ "Philadelphia",
# Yunlin and others, Taiwan:
str_detect(institution, "Yunlin, Taiwan") ~ "Douliu",
str_detect(institution, "Chang Gung Memorial Hospital") ~ "Taoyuan City",
str_detect(institution, "National Chi Nan University") ~ "Puli",
# University of Montana:
str_detect(institution, "University of Montana") ~ "Missoula",
# San Juan:
str_detect(institution, "University of Puerto Rico, San Juan") ~ "San Juan",
# Moroccan city:
str_detect(institution, "Fez, Morocco") ~ "Fez",
# Seton Hall University & other newark issues:
str_detect(institution, "Seton Hall University") ~ "Newark",
str_detect(institution, "Parsippany, NJ") ~ "Newark",
# Auburn University:
str_detect(institution, "Auburn University") ~ "Montgomery",
#  University of Manitoba:
str_detect(institution, "University of Manitoba") ~ "Winnipeg",
# University of South Dakota:
str_detect(institution, "University of South Dakota") ~ "Vermillion",
# University of Antwerpen:
str_detect(institution, "Institute Born-Bunge") ~ "Antwerp",
# University of Kansas:
str_detect(institution,  "University of Kansas") ~ "Lawrence",
# Vanderbilt University:
str_detect(institution,  "Vanderbilt") ~ "Nashville",
# Wayne state university:
str_detect(institution,  "Wayne State University") ~ "Detroit",
# University  Michigan:
str_detect(institution,  "University of Michigan") ~ "Ann Arbor",
# Carson College of Business:
str_detect(institution,  "Carson College of Business") ~ "Pullman",
# Universidad de San Martin de Porres
str_detect(institution,  "Universidad de San Martin de Porres") ~ "Lima",
# The Center for Internet and Technology Addiction
str_detect(institution,  "The Center for Internet and Technology Addiction") ~ "Hartford",
# Georgetown uni issue:
str_detect(institution, "Georgetown") ~ "Washington, D.C",
# Lincoln Memorial University issue:
str_detect(institution, "Lincoln Memorial University") ~ "Harrogate",
# Meridian Behavioral Health Services (I can't find a full address for this, despite searching the people manually, But it doesn't appear to be in the US):
str_detect(institution,  "Meridian Behavioral Health Services") ~ "",
# Nashville:
str_detect(institution, "Nashville, TN") ~ "Nashville",
# Fort Lauderdale:
str_detect(institution, "Fort Lauderdale") ~ "Fort Lauderdale",
# Byblos Lebanon:
str_detect(institution, "Byblos, Lebanon") ~ "Byblos",
# Belgium city:
str_detect(institution, "Hasselt, Belgium") ~ "Hasselt",
# Poland:
str_detect(institution, "Uniwersytet Jagiellonski Collegium Medicum") ~ "Krakow",
str_detect(institution, "Adam Mickiewicz University") ~ "Poznan",
# Brazil:
str_detect(institution, "Belo Horizonte") ~ "Belo Horizonte",
str_detect(institution, "Clementino Fraga Filho Hospital") ~ "Rio de Janeiro",
str_detect(institution, "Universidade Estadual da Paraiba") ~ "Campina Grande",
# Peru:
str_detect(institution, "Lima, Peru") ~ "Lima",
str_detect(institution, "Universidad Cesar Vallejo") ~ "Trujillo",
#Japan:
str_detect(institution, "Konan Women's University") ~ "Kobe",
str_detect(institution, "Tokai Gakuen University") ~ "Tokai Gakuen University",
str_detect(institution, "University of Hokkaido") ~ "Hokkaido",
str_detect(institution, "Tama-ku, Kawasaki") ~ "Kawasaki",
# Virginia:
str_detect(institution, "Virginia Institute for Psychiatry and Behavioral Genetics") ~ "Richmond",
# Kuala Lumpur/ Malaysia:
str_detect(institution, "Monash University Malaysia") ~ "Kuala Lumpur",
str_detect(institution, "Hospital Tuanku Ampuan Najihah") ~ "Kuala Pilah",
# Vietnam:
str_detect(institution, "Nguyen Tat Thanh University") ~ "Ho Chi Minh City",
# Santo AndrÃ©:
str_detect(institution, "Santo Andre, SP, Brazil") ~ "Santo Andre",
# Egypt"
str_detect(institution, "University of South Valley") ~ "Cairo",
# author not institution:
str_detect(institution, "Maya Sahu, RN, RM,") ~ "",
str_detect(institution, "Sahar Obeid") ~ "Beirut", # This is an author I looked up
# Random:
str_detect(institution, "Nucleo de Pesquisa em Vulnerabilidade a Saude") ~ "Belo Horizonte",
str_detect(institution, "Nottingham University") ~ "Nottingham",
str_detect(institution, "Department of Clinical Medicine, Faculty of Health and Human Ecology, Belo") ~ "Belo Horizonte",
TRUE ~ as.character(cities_of_authors)  # Default if none of the above matches
# COUNTRY CHANGES:
)) %>%
mutate(countries_of_authors = case_when(
# Random:
str_detect(institution, "Nottingham University") ~ "UK",
# Lebanon:
str_detect(institution, "Sahar Obeid") ~ "Lebanon", # This is an author I looked up
# Brazil:
str_detect(institution, "Belo Horizonte") ~ "Brazil",
str_detect(institution, "Clementino Fraga Filho Hospital") ~ "Brazil",
str_detect(institution, "Nucleo de Pesquisa em Vulnerabilidade a Saude") ~ "Brazil",
str_detect(institution, "Department of Clinical Medicine, Faculty of Health and Human Ecology, Belo") ~ "Brazil",
str_detect(institution, "Universidade Estadual da Paraiba") ~ "Brazil",
# France:
# Tours, France:
str_detect(institution, "University of Tours") ~ "France",
# Poland:
str_detect(institution, "Adam Mickiewicz University") ~ "Poland",
# Sort Georgia country issues:
str_detect(institution, "Georgia State University") ~ "USA",
str_detect(institution, "University of Georgia") ~ "USA",
str_detect(institution, "Georgia College") ~ "USA",
str_detect(cities_of_authors, "Marietta") ~ "USA",
# Georgetown uni issue:
str_detect(institution, "Georgetown") ~ "USA",
# Lincoln Memorial University issue:
str_detect(institution, "Lincoln Memorial University") ~ "USA",
# Mongolia country issues:
str_detect(institution, "Inner Mongolia") ~ "China",
# Mexico Country issues:
str_detect(institution, "University of New Mexico") ~ "USA",
# Germany issues:
str_detect(institution, "Martin-Luther-University") ~ "Germany",
# Jersey country issues:
str_detect(institution, "New Jersey") ~ "USA",
# Cambridge city issues:
str_detect(institution, "Harvard") ~ "USA",
str_detect(institution, "University of Cambridge") ~ "UK",
str_detect(institution, "Cambridge Health Alliance") ~ "USA",
str_detect(institution, "Anglia Ruskin University") ~ "UK",
# Boston issue:
str_detect(institution, "Boston, MA") ~ "USA",
# London city issues
str_detect(institution, "London")  &
!str_detect(institution, "Ontario") &
!str_detect(institution, "Canada") ~ "UK",
str_detect(institution, "Ontario") ~ "Canada",
# Sort Columbia issues:
str_detect(institution, "University of British Columbia") ~ "Canada",
str_detect(institution, "Columbia University") ~ "USA",
str_detect(institution, "United States of America") ~ "USA",
str_detect(institution, "Missouri") ~ "USA",
str_detect(institution, "New York") ~ "USA",
str_detect(institution, "British Columbia") ~ "Canada",
str_detect(institution, "Chilliwack") ~ "Canada",
str_detect(institution, "Centro Universitario Cardenal Cisneros") ~ "Spain",
# Saudi scholar:
str_detect(institution, "Sami H. Alzahrani") ~ "Saudi Arabia",
# Australia:
str_detect(institution, "Adelaide") ~ "Australia",
str_detect(institution, " CQUniversity, 400 Kent St, Sydney") ~ "Australia",
str_detect(institution, " CQUniversity") ~ "Australia",
# Austria:
str_detect(institution, "Therapiestation Lukasfeld der Stiftung Maria, Ebene") ~ "Austria",
# Sort Colombia issues:
str_detect(institution, "Barranquilla") ~ "Colombia",
# Canada:
str_detect(institution, "Department of Education, Centre for Addiction and Mental Health") ~ "Canada",
str_detect(institution, "Morton and Gloria Shulman Movement Disorders Clinic") ~ "Canada",
str_detect(institution, "University of New Brunswick") ~ "Canada",
str_detect(institution, "Addiction & Mental Health Services-Kingston") ~ "Canada",
str_detect(institution, "Toronto, ON") ~ "Canada",
str_detect(institution, "Social and Economic Impacts of Gambling in Massachusetts project,") ~ "USA", # Was originally Canada
# Case Western Reserve University:
str_detect(institution, "Case Western Reserve University") ~ "USA", # Goes to Bolton UK
# South Korea:
str_detect(institution, "Hanyang University") ~ "South Korea",
str_detect(institution, "Chungbuk National University") ~ "South Korea",
str_detect(institution, "Chungmugong Leadership Center") ~ "South Korea",
str_detect(institution, "Korea Institute on Behavioral Addictions") ~ "South Korea",
str_detect(institution, "hallym University") ~ "South Korea",
str_detect(institution, "Seoyoung University") ~ "South Korea",
# Portugal:
str_detect(institution, "Unity in Multidisciplinary Research on Biomedicine (UMIB)") ~ "Portugal",
# China:
str_detect(institution, "The Chinese University of Hong Kong") ~ "China",
str_detect(institution, "Huangmei County") ~ "China",
# South Africa:
str_detect(institution, "Christiana Care Hospital") ~ "USA",
# Newark Beacon Innovation Centre:
str_detect(institution, "Newark Beacon Innovation Centre") ~ "UK",
# Sort Liverpool issues:
str_detect(institution, "John Moores") ~ "UK",
str_detect(institution, "University of Liverpool") ~ "UK",
str_detect(institution, "LiMRIC") ~ "UK",
str_detect(institution, "Liverpool, England") ~ "UK",
str_detect(institution, "Liverpool John") ~ "UK",
# Reading issues:
str_detect(institution, "University of Reading") ~ "UK",
str_detect(institution, "USA") ~ "USA",
str_detect(institution, "United States") ~ "USA",
# Northampton issues:
str_detect(institution, "University of Northampton") ~ "UK",
str_detect(institution, "Gemini Research") ~ "USA",
# Virginia:
str_detect(institution, "Virginia Institute for Psychiatry and Behavioral Genetics") ~ "USA",
# University of Alabama:
str_detect(institution, "University of Alabama") ~ "USA",
# University  Michigan:
str_detect(institution,  "University of Michigan") ~ "USAr",
# The Center for Internet and Technology Addiction
str_detect(institution,  "The Center for Internet and Technology Addiction") ~ "USA",
#  University of Southern  California:
str_detect(institution,  "University of Southern California") ~ "USA",
# Salford Uni:
str_detect(institution, "Frederick Road Campus") ~ "UK",
# Sterling issues:
str_detect(institution, "Australia") ~ "Australia",
# Palo Alto
str_detect(institution, "Palo Alto") ~ "USA",
# Aberdeen issues:
str_detect(institution, "Hong kong") ~ "China",
# Newport issues:
str_detect(institution, "Christopher Newport University") ~ "USA",
# Oxford issues:
str_detect(institution, "University of Oxford") ~ "UK",
str_detect(institution, "Oxford, UK") ~ "UK",
str_detect(institution, "Oxford Centre for") ~ "UK",
# Weird barcelona uni & spain issue:
str_detect(institution, "University of Barcelona, Barcelona") ~ "Spain",
str_detect(institution, "Jimenez Diaz University Hospital") ~ "Spain",
str_detect(institution, "Santiago de Compostela") ~ "Spain",
str_detect(institution, "Consumer and User Psychology Unit, Faculty of Psychology, University of Santiago") ~ "Spain",
str_detect(institution, "Universidad Catolica San Antonio de Murcia") ~ "Spain",
str_detect(institution, "Serra Hunter Programme") ~ "Spain",
str_detect(institution, "Hospital Universitario de Canarias") ~ "Spain",
str_detect(institution, "Universitat Pompeu Fabra") ~ "Spain",
str_detect(institution, "Universidad Loyola Andalucia") ~ "Spain",
# Italy:
str_detect(institution, "Urbino") ~ "Italy",
str_detect(institution, "Betania Evangelical Hospital") ~ "Italy",
str_detect(institution, "University of Turin, Torino") ~ "Italy",
str_detect(institution, "Alma Mater Studiorum") ~ "Italy",
# Egypt"
str_detect(institution, "University of South Valley") ~ "Egypt",
# Brazil:
str_detect(institution, "Porto Alegre") ~ "Brazil",
# Netherlands uni confused for Austria:
str_detect(institution, "Instituut voor Onderzoek") ~ "Netherlands",
# Lausanne issues:
str_detect(institution, "Lausanne") ~ "Switzerland",
# West Chester University:
str_detect(institution, "West Chester University") ~ "USA",
#Rede SARAH de Hospitais de Reabilitacao:
str_detect(institution, "Rede SARAH de Hospitais de Reabilitacao") ~ "Brazil",
# India:
str_detect(institution, "Veer Chandra Singh Garhwali Government") ~ "India",
# Malaysia:
str_detect(institution, "Hospital Tuanku Ampuan Najihah") ~ "Malaysia",
# Taiwan:
str_detect(institution, "Taichung") ~ "Taiwan",
str_detect(institution, "Chang Gung Memorial Hospital") ~ "Taiwan",
str_detect(institution, "National Chi Nan University") ~ "Taiwan",
# Turkey:
str_detect(institution, "Inonu University") ~ "Turkey",
str_detect(institution, "Provincial Health Directorate, Agri") ~ "Turkey",
str_detect(institution, "Baltalimani Metin Sabanci") ~ "Turkey",
# Vietnam:
str_detect(institution, "Nguyen Tat Thanh University") ~ "Vietnam",
# Spain:
str_detect(institution, "Ciencies d'Alimentacio") ~ "Spain",
# Iran:
str_detect(institution, "Aja University") ~ "Iran",
# Rush University Medical Center:
str_detect(institution, "Rush University Medical Center") ~ "USA",
# Belgium:
str_detect(institution, "Institute Born-Bunge") ~ "Belgium",
# Peru:
# Universidad de San Martin de Porres
str_detect(institution,  "Universidad de San Martin de Porres") ~ "Peru",
str_detect(institution, "Universidad Cesar Vallejo") ~ "Peru",
# Israel:
str_detect(institution, "Beit-Berl College") ~ "Israel",
str_detect(institution, "Leslie and Susan Gonda") ~ "Israel",
str_detect(institution, "Bar-Ilan University") ~ "Israel",
# author not institution:
str_detect(institution, "Maya Sahu, RN, RM,") ~ "",
TRUE ~ as.character(countries_of_authors)  # Default if none of the above matches
))
# Now look to see what's left and see if it matters now if we assume our created city and country names (i.e., cities_of_authors AND countries_of_authors) are correct and the link (country.etc) is an error:
data_locations_with_full_geo_location_cleaned %>%
filter(countries_of_authors != country.etc) %>% # Identify and isolate mismatches
select(institution,
author_names,
cities_of_authors,
countries_of_authors,
country.etc) %>%
print(n = 340) # Okay, happy theses are good (after 10+ rounds of filtering)
# HERE IS WHERE YOU"RE REALLY AT NOW ROB:
# Now look at papers where we couldn't match the country but linking the world.cities dataset connects a country with a city. Error check this:
data_locations_with_full_geo_location_cleaned %>%
filter(is.na(countries_of_authors) & !is.na(country.etc)) %>% # Identify and isolate these instances
# Filter defined only unique instances to save time:
distinct(cities_of_authors, .keep_all = TRUE)  %>%
select(institution,
cities_of_authors,
countries_of_authors,
country.etc) %>%
# View()
print(n = 1000)
# data_locations_with_full_geo_location_cleaned %>%
#    filter(str_detect(institution, "arson College of Business")
#          ) %>%
# View()
# Okay,  I've gone back to the above recording section to correct any country mismatches found in the above output:
# need to try and linkj long and lat to the combination of city and country where possible
# MAKE GIT FILE SMALLER FOR STORAGE
# Other problematic  Cities we need to directly code:
# Athens
# Nottingham
# Install and load the groundhog package to ensure consistency of the package versions used here:
# install.packages("groundhog") # Install
# Load in packages using `groundhog` to ensure consistency of the versions used here:
library(groundhog) # Load
# set.groundhog.folder("C:/Users/rhei4496/Groundhog packages") # Set in a writable directory
get.groundhog.folder()
# List desired packages:
packages <- c("tidyverse",
'readr', # Load dataset from GitHib
'RCurl', # Load dataset from GitHib
'gtExtras', # Add colours to gt tables
'transformr', # Needed for certain animations (dumbell lines)
'png',# Helps render gganimate plots
'gifski', # Helps render gganimate plots
'rmarkdown', # Helps render gganimate plots
'av', # render gganimate plots as videos
'Cairo', # Anti-aliasing for the line plots (smoothing output)
'ggtext', # make fancy labels in plots
'sysfonts', # Special fonts for figures
'showtext', # Special fonts for figures
'scico', # Colour palette
'kableExtra', # Make tabless
'formattable', #  Add visualisations to tables
'gt', # Alternative table options
'gtsummary', # Create summary tables
'scales', # Allows for the removal of scientific notation in axis labels
'ggrain', # Make rain cloud plots
'waffle', # make waffle plots for proportions
'networkD3', # Make Sankey plots to show relationships
'patchwork', # Join plots in multipanel layouts
'pwr', # Check statistical power
'car', # Perform ANCOVA stats tests
'rstatix', # Perform ANCOVA stats tests
'ggpubr', # Plots for linearity checks
'broom', # Print summaries of statistical test outputs
'psych', # get detailed summary figures to Supplement statistical tests
'ggstatsplot', # Plots with statistical outputs
'janitor', # Make column names consistent format
'caret', # Compute model performance indices
'sessioninfo', # Detailed session info for reproducibility
"osfr",
"readxl",
# "Gmisc", # Produce prisma flow diagram
# 'grid', # Produce prisma flow diagram
# "glue", # Produce prisma flow diagram
"apa", # print test results in apa format
"apaTables", # print test results in apa format
"ggh4x", # truncate graph axis lines
"truncnorm", # Generate normally distributed data with limits
"ComplexUpset" # produce upset plots
)
# Load desired package with versions specific to project start date:
groundhog.library(packages, "2024-05-30")
# Install and load the groundhog package to ensure consistency of the package versions used here:
# install.packages("groundhog") # Install
# Load in packages using `groundhog` to ensure consistency of the versions used here:
library(groundhog) # Load
# set.groundhog.folder("C:/Users/rhei4496/Groundhog packages") # Set in a writable directory
get.groundhog.folder()
# List desired packages:
packages <- c("tidyverse",
'readr', # Load dataset from GitHib
'RCurl', # Load dataset from GitHib
'gtExtras', # Add colours to gt tables
'transformr', # Needed for certain animations (dumbell lines)
'png',# Helps render gganimate plots
'gifski', # Helps render gganimate plots
'rmarkdown', # Helps render gganimate plots
'av', # render gganimate plots as videos
'Cairo', # Anti-aliasing for the line plots (smoothing output)
'ggtext', # make fancy labels in plots
'sysfonts', # Special fonts for figures
'showtext', # Special fonts for figures
'scico', # Colour palette
'kableExtra', # Make tabless
'formattable', #  Add visualisations to tables
'gt', # Alternative table options
'gtsummary', # Create summary tables
'scales', # Allows for the removal of scientific notation in axis labels
'ggrain', # Make rain cloud plots
'waffle', # make waffle plots for proportions
'networkD3', # Make Sankey plots to show relationships
'patchwork', # Join plots in multipanel layouts
'pwr', # Check statistical power
'car', # Perform ANCOVA stats tests
'rstatix', # Perform ANCOVA stats tests
'ggpubr', # Plots for linearity checks
'broom', # Print summaries of statistical test outputs
'psych', # get detailed summary figures to Supplement statistical tests
'ggstatsplot', # Plots with statistical outputs
'janitor', # Make column names consistent format
'caret', # Compute model performance indices
'sessioninfo', # Detailed session info for reproducibility
"osfr",
"readxl",
# "Gmisc", # Produce prisma flow diagram
# 'grid', # Produce prisma flow diagram
# "glue", # Produce prisma flow diagram
"apa", # print test results in apa format
"apaTables", # print test results in apa format
"ggh4x", # truncate graph axis lines
"truncnorm", # Generate normally distributed data with limits
"ComplexUpset" # produce upset plots
)
# Load desired package with versions specific to project start date:
groundhog.library(packages, "2024-05-30")
# Install and load the groundhog package to ensure consistency of the package versions used here:
# install.packages("groundhog") # Install
# Load in packages using `groundhog` to ensure consistency of the versions used here:
library(groundhog) # Load
# set.groundhog.folder("C:/Users/rhei4496/Groundhog packages") # Set in a writable directory
get.groundhog.folder()
# List desired packages:
packages <- c("tidyverse",
'readr', # Load dataset from GitHib
'RCurl', # Load dataset from GitHib
'gtExtras', # Add colours to gt tables
'transformr', # Needed for certain animations (dumbell lines)
'png',# Helps render gganimate plots
'gifski', # Helps render gganimate plots
'rmarkdown', # Helps render gganimate plots
'av', # render gganimate plots as videos
'Cairo', # Anti-aliasing for the line plots (smoothing output)
'ggtext', # make fancy labels in plots
'sysfonts', # Special fonts for figures
'showtext', # Special fonts for figures
'scico', # Colour palette
'kableExtra', # Make tabless
'formattable', #  Add visualisations to tables
'gt', # Alternative table options
'gtsummary', # Create summary tables
'scales', # Allows for the removal of scientific notation in axis labels
'ggrain', # Make rain cloud plots
'waffle', # make waffle plots for proportions
'networkD3', # Make Sankey plots to show relationships
'patchwork', # Join plots in multipanel layouts
'pwr', # Check statistical power
'car', # Perform ANCOVA stats tests
'rstatix', # Perform ANCOVA stats tests
'ggpubr', # Plots for linearity checks
'broom', # Print summaries of statistical test outputs
'psych', # get detailed summary figures to Supplement statistical tests
'ggstatsplot', # Plots with statistical outputs
'janitor', # Make column names consistent format
'caret', # Compute model performance indices
'sessioninfo', # Detailed session info for reproducibility
"osfr",
"readxl",
# "Gmisc", # Produce prisma flow diagram
# 'grid', # Produce prisma flow diagram
# "glue", # Produce prisma flow diagram
"apa", # print test results in apa format
"apaTables", # print test results in apa format
"ggh4x", # truncate graph axis lines
"truncnorm", # Generate normally distributed data with limits
"ComplexUpset" # produce upset plots
)
# Load desired package with versions specific to project start date:
groundhog.library(packages, "2024-05-30")
# force.install=TRUE)
# tolerate.R.version = '4.4.0')
# groundhog.library(packages, "2023-12-29")
